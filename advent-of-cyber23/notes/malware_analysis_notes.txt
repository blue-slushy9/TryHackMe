-Analyze the C2's backend infrastructure based on the malware's source code

-"retrieved malware sample"

-Analyzing malware samples safely

-Fundamentals of .NET binaries

-dnSpy tool for decompiling malware samples written in .NET

-Building an essential methodology for analyzing malware source code


# MALWARE SANDBOXING

    -typically a VM or other segmented system, to prevent malware from running
    on the host system
    
    -Network controls: limit and monitor the network traffic the malware
    generates, which also prevents the propagation of malware in any other
    network assets

    -Virtualization: many sandboxes use hypervisors to run malware in a
    controlled, isolated environment; this allows for easy snapshots, resets,
    and disposal after the analysis

    -Monitoring and logging: sandboxes record detailed logs of the malware's
    activites, including system interactions, network traffic, and file
    modification; these are extremely helpful in understanding the malware's
    behavior

# STATIC ANALYSIS
Means that the malware will not be executed or "detonated"


# .NET COMPILED BINARIES

    -compiled files containing code written in languages compatible with the
    .NET framework; e.g. C#, VB.NET, F#, or managed C++. These binaries are
    executable files (with the .exe extension) or dynamic link libraries
    (with the .dll extension). They can also be assemblies that contain
    multiple types and resources.

    -Unlike other languages, such as C or C++, .NET languages (e.g. C#) do not
    directly translate the code into machine-code after compilation. Instead,
    they use an intermediate language (IL), like a pseudocode, and translate
    it into native machine code during runtime via a Common Language Runtime
    (CLR).

    -It's only possible to analyze a C or C++ compiled binary by reading its
    assembly instructions (low-level code). Whereas a C# binary can be
    decompiled and its source code retrieved since the intermediate language
    contains metadata that can be reconverted into its source code form.

# BASIC C# PROGRAMMING

    -The retrieved malware is written in C#

    # SAMPLE C# CODE

namespace DemoOnly
{
    internal class BasicProgramming
    {
        static void Main(string[] args)
        {
            string to_print = "Hello World!";
            ShowOutput(to_print);
        }

        public static void ShowOutput(string text)
        {
            // prints the contents of the text variable - or simply, this is a print function
            Console.WriteLine(text);
        }
    }
}


    # NAMESPACE
    Container that organizes related code elements (e.g. classes) into a
    logical grouping; helps prevent naming conflicts and provides structure
    to the code; the namespace DemoOnly is the namespace that contains the
    BasicProgramming class

    # 